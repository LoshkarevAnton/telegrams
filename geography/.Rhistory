# 3
vec4
# 4 - посчитать сумму
sum(vec4, na.rm = FALSE)
vec4
# 1
vec4 <- c(300, 15, 8, 20, 0, 1, 110)
vec4
# 2 - заменить значения больше 20 на NA
vec4[vec4 > 20] <- NA
# 3
vec4
# 4 - посчитать сумму
sum(vec4, na.rm = TRUE)
M1 <- matrix(1, nrow=4,ncol=4)
M1
M1[2:3, 2:3] <- 2
M1 <- matrix(1, nrow=4,ncol=4)
M1
# 2
M1[2:3, 2:3] <- 2
M1[2:3, 2:3] <- 2
M1
M1[, 1:2]
M1[, 2:3]
M1[,2] == M1[2,]
mult_tab <- matrix(1:81, nrow=9,ncol=9)
mult_tab
mult_tab[6:8, 3:7]
mult_tab[3:7, 6:8]
# 6*
mult_tab[6:8, 3:7]
mult_tab <- matrix(rep(1:9, rep(9,9))*(1:9), nrow=9,ncol=9)
mult_tab
# 6*
mult_tab[6:8, 3:7]
mult_tab[mult_tab > 10] = TRUE
mult_tab[mult_tab < 10] = FALSE
mult_tab[mult_tab > 10] = TRUE
mult_tab[mult_tab < 10] = FALSE
mult_tab
mult_tab[mult_tab > 10] = TRUE
mult_tab
mult_tab[mult_tab < 10] = FALSE
mult_tab
mult_tab >= 10
mult_tab <- matrix(rep(1:9, rep(9,9))*(1:9), nrow=9,ncol=9)
mult_tab
# 6*
mult_tab[6:8, 3:7]
# 7*
mult_tab >= 10
mult_tab2[mult_tab < 10] <- 0
mult_tab2 <- matrix(mult_tab)
mult_tab2[mult_tab < 10] <- 0
mult_tab2 <- matrix(mult_tab)
mult_tab2[mult_tab < 10] <- 0
mult_tab2
mult_tab2 <- mult_tab
mult_tab2[mult_tab2 < 10] <- 0
mult_tab2
list1 = list(numbers = 1:5, letters = letters, logic = TRUE)
list1
list1[1]
list1[[1]]
list1$numbers
list[[[1]]]
list1[[[1]]]
list1[[1]]
list1$numbers[1]
list2 <- list(list1$pupa, list2$lupa)
list2 <- list(list1$pupa, list2$lupa)
list2
list2 = list(list1$pupa, list2$lupa)
list2
# 4 - создать list2 = два списка list1
list2 = list(pupa = list1, lupa = list1)
list2
list2[1]
list2[1]list2[[2]]pupa$letters[3]
list2[[1]][[2]][3]
data(mtcars)
mtcars
str(mtcars)
mtcars[3,4]
mtcars[1:6, 1:6]
mtcars$wt
mtcars$hp$mpg$cyl
mtcars["hp", "mpg", "cyl"]
# 6 - извлечь колонки hp, mpg, cyl
mtcars[, c("hp", "mpg", "cyl")]
mtcars(mtcars$cyl == 4)
# 7 - посчитать кол-во автомобилей с 4 цилиндрами
sum(mtcars$cyl == 4)
mean(mtcars$cyl == 4)
mtcars$hp >= 100
mtcars[mtcars$hp >= 100]
mtcars[mtcars$hp >= 100, ]
mtcars[mtcars$hp >= 100, mtcars$cyl = 4]
mtcars[mtcars$hp >= 100, mtcars$cyl == 4]
mtcars[, c(mtcars$hp >= 100, mtcars$cyl == 4)]
mtcars[mtcars$hp >= 100 & mtcars$cyl == 4, ]
max(mtcars$wt)
min(mtcars$wt)
mtcars[min(mtcars$wt)]
mtcars[min(mtcars$wt), ]
mtcars[mtcars$wt == min(mtcars$wt), ]
mtcars[mtcars$wt < mean(mtcars$wt)]
mtcars[mtcars$wt < mean(mtcars$wt), ]
mtcars$wt_kg <- round(mtcars$wt * 1000 * 0.45359237)
mtcars
view(mtcars)
View(mtcars)
install.packages("remotes")
library(remotes)
remotes::package_deps("tidyverse")
remotes::install_github("dracor-org/rdracor")
library(rdracor)
godunov <- play_igraph(corpus = "rus",
play = "pushkin-boris-godunov")
plot(godunov)
read.csv("heroes_information.csv")
read.csv("heroes_information.csv")
setwd()
read.csv("heroes_information.csv")
read.csv("heroes_information.csv")
read.csv("heroes_information.csv")
heroes <- read.csv("https://raw.githubusercontent.com/agricolamz/2020-2021-ds4dh/master/data/heroes_information.csv")
heroes <- read.csv("data/heroes_information.csv", stringsAsFactors = FALSE)
read.csv("heroes_information.csv")
#heroes <- read.csv("https://raw.githubusercontent.com/agricolamz/2020-2021-ds4dh/master/data/heroes_information.csv")
# чтение данных из текстового файла - функция read.table()
heroes <- read.csv("data/heroes_information.csv", stringsAsFactors = FALSE)
read.csv("heroes_information.csv")
heroes <- read.csv("heroes_information.csv", stringsAsFactors = FALSE)
view(heroes)
read.csv("heroes_information.csv")
#heroes <- read.csv("https://raw.githubusercontent.com/agricolamz/2020-2021-ds4dh/master/data/heroes_information.csv")
# чтение данных из текстового файла - функция read.table()
heroes <- read.csv("heroes_information.csv", stringsAsFactors = FALSE)
# параметр stringsAsFactors = задаёт то, как будут прочитаны строковые значения
view(heroes)
View(heroes)
str(heroes)
heroes <- read.csv("heroes_information.csv",
stringsAsFactors = FALSE,
na.strings = c("-", "-99")
heroes <- read.csv("heroes_information.csv",
stringsAsFactors = FALSE,
na.strings = c("-", "-99"))
heroes <- read.csv("heroes_information.csv",
stringsAsFactors = FALSE,
na.strings = c("-", "-99"))
dc <- heroes[heroes$Publisher == "DC Comics",]
write.csv(dc, "dc_heroes_information.csv", row.names = FALSE)
# write.csv - записать датафрейм в формат .csv (экспорт)
number <- 1
if (number > 0) "Положительное число"
read.csv("first_scatterplot.csv")
read.csv("first_scatterplot.csv")
ggplot(data = first_scatterplot, aes(x, y)) +
geom_point()
install.packages(ggplot2)
install.packages(tidyverse)
read.csv("first_scatterplot.csv")
ggplot(data = first_scatterplot, aes(x, y)) +
geom_point()
install.packages("ggplot2")
read.csv("first_scatterplot.csv")
ggplot(data = first_scatterplot, aes(x, y)) +
geom_point()
library(tidyverse)
read.csv("first_scatterplot.csv")
ggplot(aes(x, y))
geom_point()
library(tidyverse)
first_scatterplot <- read.csv("first_scatterplot.csv")
ggplot(data = first_scatterplot, aes(x, y))
geom_point()
library(tidyverse)
first_scatterplot <- read.csv("first_scatterplot.csv")
ggplot(data = first_scatterplot, aes(x, y)) +
geom_point()
UK_pubs = read.csv("UK_pubs.csv")
UK_pubs <- read.csv("UK_pubs.csv")
View(UK_pubs)
UK_pubs <- read.csv("UK_pubs.csv")
misspelling %>%
slice(1:20) %>%
ggplot(aes(spelling, count))+
geom_col()
UK_pubs %>%
slice(1:20) %>%
ggplot(aes(spelling, count))+
geom_col()
UK_pubs <- read.csv("UK_pubs.csv")
UK_pubs %>%
ggplot(aes(a, b, label = color)) +
geom_text()
UK_pubs %>%
ggplot(aes(pub_name, label = color)) +
geom_text()
UK_pubs <- read.csv("UK_pubs.csv")
UK_pubs %>%
ggplot(aes(pub_name)) +
geom_text()
UK_pubs %>%
count(pub_name) %>%
UK_pubs %>%
count(pub_name) %>%
UK_pubs <- read.csv("UK_pubs.csv")
UK_pubs %>%
count(pub_name) %>%
ggplot(aes(fct_reorder(pub_name, n), n, label = n))+
geom_col()+
geom_text(nudge_y = 150)+
coord_flip()
UK_pubs %>%
count(pub_name) %>%
ggplot(aes(fct_reorder(pub_name, n), n))+
geom_col()+
coord_flip()
UK_pubs <- read.csv("UK_pubs.csv")
count(UK_pubs, sort = TRUE)
slice(1:30) %>%
ggplot(aes(n, pub_name, label = n))+
geom_col()+
geom_text(nudge_x = 8)
labs(x = "", y = "", caption = "data from Pudding.com")
UK_pubs <- read.csv("UK_pubs.csv")
count(pub_name, sort = TRUE)
slice(1:30) %>%
mutate()
ggplot(aes(n, pub_name, label = n))+
geom_col()+
geom_text(nudge_x = 8)
labs(x = "", y = "", caption = "data from Pudding.com")
UK_pubs <- read.csv("UK_pubs.csv")
count(pub_name, sort = TRUE)
slice(1:30) %>%
mutate(pub_name = fct_reorder(pub_name, n)) %>%
ggplot(aes(n, pub_name, label = n))+
geom_col()+
geom_text(nudge_x = 8)
labs(x = "", y = "", caption = "data from Pudding.com")
UK_pubs %>%
count(pub_name, sort = TRUE)
slice(1:30) %>%
mutate(pub_name = fct_reorder(pub_name, n)) %>%
ggplot(aes(n, pub_name, label = n))+
geom_col()+
geom_text(nudge_x = 8)
labs(x = "", y = "", caption = "data from Pudding.com")
UK_pubs %>%
count(pub_name, sort = TRUE) %>%
slice(1:30) %>%
mutate(pub_name = fct_reorder(pub_name, n)) %>%
ggplot(aes(n, pub_name, label = n))+
geom_col()+
geom_text(nudge_x = 8)+
labs(x = "", y = "", caption = "data from Pudding.com")
df <- tibble(
~month, ~value,
"апрель", 2,
"май", 12,
"июнь", 14,
"июль", 9,
"август", 5,
"сентябрь", 4
) %>%
mutate(month = fct_inorder(month)) %>%
ggplot(aes(month, value))+
geom_point(group = 1)+
geom_point(size = 4, color = "white")+
geom_point()+
theme_bw()
df <- tibble(
~object, ~value,
"Путин", 26,
"общество", 4,
"силовики", 3,
"губернаторы", 3,
"судьи", 2,
"местные чиновники", 2,
'"Единая Россия"', 2,
"Росатом", 1,
"конституция", 1,
"депутаты", 1
) %>%
mutate(object = fct_inorder(object)) %>%
ggplot(aes(value, object))+
geom_col(fill = "tan3")
diamonds %>%
ggplot(aes(carat, price, color = cut)) +
geom_rug() +
geom_point()
diamonds %>%
ggplot(aes(carat, price, color = cut)) +
geom_rug() +
geom_point()
mtcars %>%
ggplot(aes(mpg, drat, color = factor(cyl))) +
geom_rug() +
geom_point()
geom_density_ridges(alpha = 0.6)
install.packages("stringi")
library(tidyverse)
library(stringi)
stri_trans_general("stringi", "latin-japanese")
stri_trans_general("stringi", "latin-ukrainian")
stri_trans_general("stringi", "latin-romanian")
stri_trans_general("stringi", "latin-georgian")
stri_trans_general("stringi", "latin-chinese")
stri_trans_general("stringi", "latin-greek")
library(tidyverse)
library(ggridges)
df <- read_csv("https://raw.githubusercontent.com/agricolamz/2020-2021-ds4dh/master/data/perceptions_of_probability.csv")
glimpse(df)
df %>%
pivot_longer(names_to = "estimation", values_to = "value",
`Almost Certainly`:`Chances Are Slight`) %>%
mutate(estimation = fct_reorder(estimation, value)) %>%
ggplot(aes(value, estimation, fill = estimation))+
geom_density_ridges(show.legend = FALSE)
diamonds %>%
group_by(cut) %>%
mutate(m_median = median(price)) %>%
ggplot(aes(cut, price))+
geom_violin()+
geom_boxplot(outlier.alpha = 0, alpha = 0.3)+
geom_point(aes(y = m_median))
df %>%
count(pub_name, sort = TRUE) %>%
mutate(nchar = str_count(pub_name)) %>%
slice(1:40) %>%
ggplot(aes(nchar, n))+
geom_point()+
geom_text_repel(aes(label = pub_name))+
labs(x = "number of symbols",
y = "number of bars",
title = "40 most popular bars in England",
caption = "data from ...")
library(tidyverse)
cities <- read_tsv("https://raw.githubusercontent.com/agricolamz/DS_for_DH/master/data/cities_of_russia.csv")
dictionary <- read_tsv("https://raw.githubusercontent.com/agricolamz/DS_for_DH/master/data/freq_dict_2011.csv")
cities %>%
mutate(city = tolower(city),
city = str_replace_all(city, "ё", "е")) %>%
left_join(dictionary, by = c("city" = "lemma")) %>%
na.omit() %>%
distinct(city)
library(tidyverse)
diamonds
diamonds %>%
count(clarity, color, cut, sort = TRUE) %>%
mutate(ratio = n/sum(n)) %>%
summarise(entropy = -sum(ratio*log2(ratio)))
diamonds %>%
count(clarity, sort = TRUE) %>%
mutate(ratio = n/sum(n)) %>%
summarise(entropy = -sum(ratio*log2(ratio)))
diamonds %>%
count(color, sort = TRUE) %>%
mutate(ratio = n/sum(n)) %>%
summarise(entropy = -sum(ratio*log2(ratio)))
diamonds %>%
count(cut, sort = TRUE) %>%
mutate(ratio = n/sum(n)) %>%
summarise(entropy = -sum(ratio*log2(ratio)))
setwd("C:/Users/marya/python_projects/telegrams/geography")
```{r, echo = FALSE, warning = FALSE, message = FALSE}
library(tidyverse)
library(leaflet)
library(leafsync)
telegrams <- read_csv("all_telegrams.csv")
pal_cat <- colorFactor("Spectral", domain = telegrams$sentiment)
pal_cat(telegrams$sentiment[1])
telegrams %>%
leaflet() %>%
addTiles() %>%
addCircles(lat = ~sent_lat,
lng = ~sent_lon,
label = ~sending_place,
color  = ~pal_cat(sentiment),
opacity = 0.9,
popup = ~sending_place) %>%
addLegend(pal = pal_cat,
values = ~sentiment,
title = "")
telegrams %>%
leaflet() %>%
addTiles() %>%
addCircles(lat = ~sent_lat,
lng = ~sent_lon,
radius = 2,
label = ~sending_place,
color  = ~pal_cat(sentiment),
opacity = 0.9,
popup = ~sending_place) %>%
addLegend(pal = pal_cat,
values = ~sentiment,
title = "")
telegrams %>%
leaflet() %>%
addTiles() %>%
addCircles(lat = ~sent_lat,
lng = ~sent_lon,
radius = 10,
label = ~sending_place,
color  = ~pal_cat(sentiment),
opacity = 0.9,
popup = ~sending_place) %>%
addLegend(pal = pal_cat,
values = ~sentiment,
title = "")
telegrams %>%
leaflet() %>%
addTiles() %>%
addCircles(lat = ~sent_lat,
lng = ~sent_lon,
radius = 100,
label = ~sending_place,
color  = ~pal_cat(sentiment),
opacity = 0.9,
popup = ~sending_place) %>%
addLegend(pal = pal_cat,
values = ~sentiment,
title = "")
telegrams %>%
leaflet() %>%
addTiles() %>%
addCircles(lat = ~sent_lat,
lng = ~sent_lon,
weight = 1,
radius = 100,
label = ~sending_place,
color  = ~pal_cat(sentiment),
opacity = 0.9,
popup = ~sending_place) %>%
addLegend(pal = pal_cat,
values = ~sentiment,
title = "")
telegrams %>%
leaflet() %>%
addTiles() %>%
addCircles(lat = ~sent_lat,
lng = ~sent_lon,
weight = 100,
radius = 100,
label = ~sending_place,
color  = ~pal_cat(sentiment),
opacity = 0.9,
popup = ~sending_place) %>%
addLegend(pal = pal_cat,
values = ~sentiment,
title = "")
telegrams %>%
leaflet() %>%
addTiles() %>%
addCircles(lat = ~sent_lat,
lng = ~sent_lon,
weight = 10,
radius = 100,
label = ~sending_place,
color  = ~pal_cat(sentiment),
opacity = 0.9,
popup = ~sending_place) %>%
addLegend(pal = pal_cat,
values = ~sentiment,
title = "")
telegrams %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(lat = ~sent_lat,
lng = ~sent_lon,
weight = 10,
radius = 100,
label = ~sending_place,
color  = ~pal_cat(sentiment),
opacity = 0.9,
popup = ~sending_place) %>%
addLegend(pal = pal_cat,
values = ~sentiment,
title = "")
telegrams %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(lat = ~sent_lat,
lng = ~sent_lon,
#weight = 10,
#radius = 100,
label = ~sending_place,
color  = ~pal_cat(sentiment),
opacity = 0.9,
popup = ~sending_place) %>%
addLegend(pal = pal_cat,
values = ~sentiment,
title = "")
telegrams %>%
leaflet() %>%
addTiles() %>%
addCircles(lat = ~sent_lat,
lng = ~sent_lon,
#weight = 10,
#radius = 100,
label = ~sending_place,
color  = ~pal_cat(sentiment),
opacity = 0.9,
popup = ~sending_place) %>%
addLegend(pal = pal_cat,
values = ~sentiment,
title = "")
